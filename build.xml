<project name="clojure-ant-tasks" default="jar">
  <property name="src.dir" location="src/main" />
  <property name="classes.dir" location="classes" />
  <property name="test.classes.dir" location="${classes.dir}/test" />
  <property name="jar.name" value="clojure-ant-tasks.jar" />

  <path id="project.classpath">
    <pathelement location="${src.dir}" />
    <pathelement location="${classes.dir}" />
    <fileset dir="lib">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="test.classpath">
    <path refid="project.classpath" />
    <pathelement location="${test.classes.dir}" />
    <pathelement location="src/test" />
  </path>

  <target name="clean" description="Remove generated files">
    <delete dir="${classes.dir}" />
    <delete file="${jar.name}" />
  </target>

  <target name="def-tasks">
    <!-- In a real build file using this library, the classnames would not
         be in this "bootstrap" package. That is only necessary here to avoid
         name conflicts with the classes we're compiling. -->
    <taskdef name="compile-clojure"
      classname="com.ubermensch.ant.clojure.bootstrap.CompileTask"
      classpath="antlib/clojure-ant-tasks-bootstrap.jar:lib/clojure.jar" />
    <taskdef name="test-clojure"
      classname="com.ubermensch.ant.clojure.bootstrap.TestTask"
      classpath="antlib/clojure-ant-tasks-bootstrap.jar:lib/clojure.jar" />
  </target>

  <target name="compile" depends="def-tasks">
    <mkdir dir="${classes.dir}" />

    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false">
      <classpath><path refid="project.classpath" /></classpath>
    </javac>

    <compile-clojure>
      <classpath>
        <path refid="project.classpath" />
        <!--
        <pathelement location="${src.dir}" />
        <pathelement location="${classes.dir}" />
        <fileset dir="lib">
          <include name="**/*.jar" />
        </fileset>
        -->
      </classpath>
      <namespace>com.ubermensch.ant.clojure.namespace</namespace>
      <namespace>com.ubermensch.ant.clojure.base-task</namespace>
      <namespace>com.ubermensch.ant.clojure</namespace>
    </compile-clojure>
  </target>

  <!--
  <target name="compile">
    <mkdir dir="${classes.dir}" />
    <java classname="clojure.lang.Compile" fork="true"
      resultproperty="compile.result">
      <classpath>
        <path refid="project.classpath" />
      </classpath>
      <sysproperty key="clojure.compile.path" value="${classes.dir}" />
      <arg value="com.ubermensch.ant.clojure.namespace" />
      <arg value="com.ubermensch.ant.clojure.base-task" />
      <arg value="com.ubermensch.ant.clojure" />
    </java>
      
    <condition property="compile.failure">
      <not>
        <equals arg1="${compile.result}" arg2="0" />
      </not>
    </condition>

    <fail if="compile.failure" message="compile failed" />
  </target>
  -->

  <target name="test" depends="compile">
    <java classname="clojure.main" fork="true" resultproperty="test.result">
      <classpath>
        <path refid="project.classpath" />
        <path refid="test.classpath" />
      </classpath>
      <arg value="-e" />
      <arg value="(require 'com.ubermensch.ant.clojure)
                  (use 'clojure.test)
                  (def failed (ref 0)) (declare orig-report)
                  (binding [orig-report report
                            report #(do (if (#{:fail :error} (:type %))
                                            (dosync (commute failed inc)))
                                        (orig-report %))]
                    (run-all-tests)
                    (.println System/out)
                    (System/exit @failed))" />
    </java>

    <condition property="test.failure">
      <not>
        <equals arg1="${test.result}" arg2="0" />
      </not>
    </condition>

    <fail if="test.failure" message="test failed" />
  </target>

  <target name="launch_ng">
    <java classname="com.martiansoftware.nailgun.NGServer"
          fork="true">
      <classpath>
        <path refid="test.classpath" />
      </classpath>
      <arg value="127.0.0.1" />
    </java>
  </target>

  <target name="jar" depends="test">
    <jar jarfile="${jar.name}" basedir="${classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.clj" />
      </fileset>
    </jar>
  </target>
</project>
